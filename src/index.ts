const context: any = {
	"dfc-b": "https://github.com/datafoodconsortium/ontology/releases/latest/download/DFC_BusinessOntology.owl#",
}

function unprefix(prefixed: string) {
	const prefix = prefixed.split(':')[0];
	return prefixed.replace(':', '').replace(prefix, context[prefix]);
}

export const DFC = {
	NAMESPACE: context["dfc-b"],
	TechnicalProduct: unprefix("dfc-b:TechnicalProduct"),
	firstName: unprefix("dfc-b:firstName"),
	AsPlannedConsumptionFlow: unprefix("dfc-b:AsPlannedConsumptionFlow"),
	offeredTo: unprefix("dfc-b:offeredTo"),
	concerns: unprefix("dfc-b:concerns"),
	quantity: unprefix("dfc-b:quantity"),
	hasPhysicalDimension: unprefix("dfc-b:hasPhysicalDimension"),
	phoneNumber: unprefix("dfc-b:phoneNumber"),
	affiliates: unprefix("dfc-b:affiliates"),
	totalTheoreticalStock: unprefix("dfc-b:totalTheoreticalStock"),
	hasStreet: unprefix("dfc-b:hasStreet"),
	proposes: unprefix("dfc-b:proposes"),
	belongsTo: unprefix("dfc-b:belongsTo"),
	partOf: unprefix("dfc-b:partOf"),
	orderNumber: unprefix("dfc-b:orderNumber"),
	maintainedBy: unprefix("dfc-b:maintainedBy"),
	SaleSession: unprefix("dfc-b:SaleSession"),
	hasPaymentStatus: unprefix("dfc-b:hasPaymentStatus"),
	beginDate: unprefix("dfc-b:beginDate"),
	hasIncome: unprefix("dfc-b:hasIncome"),
	sku: unprefix("dfc-b:sku"),
	listedIn: unprefix("dfc-b:listedIn"),
	stockLimitation: unprefix("dfc-b:stockLimitation"),
	hasCountry: unprefix("dfc-b:hasCountry"),
	QuantitativeValue: unprefix("dfc-b:QuantitativeValue"),
	Order: unprefix("dfc-b:Order"),
	hasOrderStatus: unprefix("dfc-b:hasOrderStatus"),
	supplies: unprefix("dfc-b:supplies"),
	hasOutcome: unprefix("dfc-b:hasOutcome"),
	offeredItem: unprefix("dfc-b:offeredItem"),
	hasMainContact: unprefix("dfc-b:hasMainContact"),
	AllergenCharacteristic: unprefix("dfc-b:AllergenCharacteristic"),
	Person: unprefix("dfc-b:Person"),
	region: unprefix("dfc-b:region"),
	Offer: unprefix("dfc-b:Offer"),
	lists: unprefix("dfc-b:lists"),
	longitude: unprefix("dfc-b:longitude"),
	latitude: unprefix("dfc-b:latitude"),
	Price: unprefix("dfc-b:Price"),
	VATrate: unprefix("dfc-b:VATrate"),
	orderedBy: unprefix("dfc-b:orderedBy"),
	manages: unprefix("dfc-b:manages"),
	Enterprise: unprefix("dfc-b:Enterprise"),
	AsPlannedTransformation: unprefix("dfc-b:AsPlannedTransformation"),
	OrderLine: unprefix("dfc-b:OrderLine"),
	consumes: unprefix("dfc-b:consumes"),
	incomeOf: unprefix("dfc-b:incomeOf"),
	value: unprefix("dfc-b:value"),
	Address: unprefix("dfc-b:Address"),
	hasNutrientDimension: unprefix("dfc-b:hasNutrientDimension"),
	defines: unprefix("dfc-b:defines"),
	URL: unprefix("dfc-b:URL"),
	familyName: unprefix("dfc-b:familyName"),
	AsPlannedProductionFlow: unprefix("dfc-b:AsPlannedProductionFlow"),
	produces: unprefix("dfc-b:produces"),
	SuppliedProduct: unprefix("dfc-b:SuppliedProduct"),
	hasFulfilmentStatus: unprefix("dfc-b:hasFulfilmentStatus"),
	outcomeOf: unprefix("dfc-b:outcomeOf"),
	description: unprefix("dfc-b:description"),
	hasTransformationType: unprefix("dfc-b:hasTransformationType"),
	endDate: unprefix("dfc-b:endDate"),
	maintains: unprefix("dfc-b:maintains"),
	CustomerCategory: unprefix("dfc-b:CustomerCategory"),
	references: unprefix("dfc-b:references"),
	hasDescription: unprefix("dfc-b:hasDescription"),
	hasAllergenDimension: unprefix("dfc-b:hasAllergenDimension"),
	hasPart: unprefix("dfc-b:hasPart"),
	hasUnit: unprefix("dfc-b:hasUnit"),
	hasCity: unprefix("dfc-b:hasCity"),
	Catalog: unprefix("dfc-b:Catalog"),
	date: unprefix("dfc-b:date"),
	SocialMedia: unprefix("dfc-b:SocialMedia"),
	name: unprefix("dfc-b:name"),
	Quantity: unprefix("dfc-b:Quantity"),
	countryCode: unprefix("dfc-b:countryCode"),
	PhoneNumber: unprefix("dfc-b:PhoneNumber"),
	PhysicalCharacteristic: unprefix("dfc-b:PhysicalCharacteristic"),
	hasPostalCode: unprefix("dfc-b:hasPostalCode"),
	offeredThrough: unprefix("dfc-b:offeredThrough"),
	VATnumber: unprefix("dfc-b:VATnumber"),
	NutrientCharacteristic: unprefix("dfc-b:NutrientCharacteristic"),
	CatalogItem: unprefix("dfc-b:CatalogItem"),
	hasPrice: unprefix("dfc-b:hasPrice"),
}

export default DFC;
